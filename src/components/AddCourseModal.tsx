'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { FormField } from '@/components/forms/FormField';
import { LoadingButton } from '@/components/ui/loading';
import { Plus, FileText, Code } from 'lucide-react';
import {
  createCourseSchema,
  CreateCourseInput,
} from '@/lib/validations';
import { useCoursesStore } from '@/stores/coursesStore';
import { useUIStore } from '@/stores/uiStore';
import {
  showSuccessToast,
  showErrorToast,
} from '@/components/ui/toast';

interface AddCourseModalProps {
  children?: React.ReactNode;
}

export function AddCourseModal({ children }: AddCourseModalProps) {
  const [open, setOpen] = useState(false);
  const { createCourse, isLoading } = useCoursesStore();
  const { setModalOpen } = useUIStore();

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
    setValue,
    watch,
  } = useForm<CreateCourseInput>({
    resolver: zodResolver(createCourseSchema),
    defaultValues: {
      name: '',
      courseUrl: '',
      certificateTemplate: '',
    },
  });

  const courseUrlValue = watch('courseUrl');

  const onSubmit = async (data: CreateCourseInput) => {
    try {
      await createCourse({
        courseId: '', // This will be generated by the API
        courseUrl: data.courseUrl,
        name: data.name,
        certificateTemplate: data.certificateTemplate,
        status: 'active' as const,
        totalLearners: 0,
        completedLearners: 0,
      });

      showSuccessToast(
        'Course Created',
        'Course created successfully!'
      );
      handleClose();
    } catch (error) {
      showErrorToast(
        'Error Creating Course',
        error instanceof Error
          ? error.message
          : 'Failed to create course'
      );
    }
  };

  const handleClose = () => {
    reset();
    setOpen(false);
    setModalOpen('addCourse', false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button className="flex items-center space-x-2">
            <Plus className="h-4 w-4" />
            <span>Add Course</span>
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] flex flex-col">
        <DialogHeader className="space-y-4">
          <DialogTitle className="text-2xl">
            Add New Course
          </DialogTitle>
          <DialogDescription>
            Fill in the details to add a new course and provide the
            HTML template for certificates.
          </DialogDescription>
        </DialogHeader>

        <Separator />

        <div className="flex-1 overflow-y-auto px-1">
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="grid gap-6 py-4"
          >
            <FormField
              name="name"
              label="Course Name"
              placeholder="Enter course name"
              required
              register={register}
              error={errors.name}
              description="The name of the course that will be displayed to learners"
            />

            <FormField
              name="courseUrl"
              label="Course URL"
              placeholder="https://sharondecet.graphy.com/courses/..."
              required
              register={register}
              error={errors.courseUrl}
              description="The Graphy course URL for this course"
            />

            <div className="space-y-2">
              <label className="text-sm font-medium">
                Certificate HTML Template
                <span className="text-red-500 ml-1">*</span>
              </label>
              <p className="text-sm text-muted-foreground">
                Enter the HTML code that will be used as the
                certificate template. Use placeholders like{' '}
                {'{learnerName}'}, {'{courseName}'},{' '}
                {'{completionDate}'} for dynamic content.
              </p>

              <textarea
                {...register('certificateTemplate')}
                placeholder="Enter your HTML template here..."
                className="w-full min-h-[200px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                style={{ resize: 'vertical' }}
              />

              {errors.certificateTemplate && (
                <p className="text-sm text-red-500">
                  {errors.certificateTemplate.message}
                </p>
              )}
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
              <div className="flex items-start space-x-2">
                <FileText className="h-4 w-4 text-blue-600 mt-0.5" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium mb-1">
                    Template Placeholders:
                  </p>
                  <ul className="list-disc list-inside space-y-1 text-xs">
                    <li>
                      <code>{'{learnerName}'}</code> - Learner's full
                      name
                    </li>
                    <li>
                      <code>{'{courseName}'}</code> - Course name
                    </li>
                    <li>
                      <code>{'{completionDate}'}</code> - Course
                      completion date
                    </li>
                    <li>
                      <code>{'{organizationName}'}</code> - Learner's
                      organization
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </form>
        </div>

        <Separator />

        <DialogFooter className="space-x-2">
          <Button
            type="button"
            variant="outline"
            onClick={handleClose}
            disabled={isSubmitting || isLoading}
          >
            Cancel
          </Button>
          <LoadingButton
            type="submit"
            isLoading={isSubmitting || isLoading}
            loadingText="Adding Course..."
            onClick={handleSubmit(onSubmit)}
            className="flex items-center space-x-2"
          >
            <span>Add Course</span>
          </LoadingButton>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
